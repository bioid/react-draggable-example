{"version":3,"sources":["logo.svg","components/Draggable.js","components/InnerComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","WrappedComponent","InnerComponent","react_default","a","createElement","style","width","height","background","border","React","Component","Draggable","_React$Component","_class","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mouseX","Number","mouseY","elementX","elementY","isMouseDown","element","createRef","inherits","createClass","key","value","event","console","log","clientX","clientY","parseInt","current","left","top","deltaX","deltaY","_this2","className","onMouseDown","e","onMouseUp","onMouseMove","ref","App","components_InnerComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iNCGNC,ECA5BC,mLAQF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAPO,CACZC,MAAO,QACPC,OAAQ,QACRC,WAAY,OACZC,OAAQ,oBAGR,qBATuBC,IAAMC,WAgBpBC,GDhBmBZ,ECgBTC,EDfvB,SAAAY,GACE,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,OAASC,SACdR,EAAKS,OAASD,SACdR,EAAKU,SAAW,EAChBV,EAAKW,SAAW,EAChBX,EAAKY,aAAc,EACnBZ,EAAKa,QAAUnB,IAAMoB,YAPJd,EADrB,OAAAC,OAAAc,EAAA,EAAAd,CAAAH,EAAAD,GAAAI,OAAAe,EAAA,EAAAf,CAAAH,EAAA,EAAAmB,IAAA,cAAAC,MAAA,SAUcC,GACVC,QAAQC,IAAI,QAASF,GACrBhB,KAAKI,OAASY,EAAMG,QACpBnB,KAAKM,OAASU,EAAMI,QACpBpB,KAAKS,aAAc,IAdvB,CAAAK,IAAA,YAAAC,MAAA,SAgBYC,GACRhB,KAAKS,aAAc,EACnBT,KAAKO,SAAWc,SAASrB,KAAKU,QAAQY,QAAQpC,MAAMqC,OAAS,EAC7DvB,KAAKQ,SAAWa,SAASrB,KAAKU,QAAQY,QAAQpC,MAAMsC,MAAQ,IAnBhE,CAAAV,IAAA,cAAAC,MAAA,SAqBcC,GACV,GAAKhB,KAAKS,YAAV,CACA,IAAIgB,EAAST,EAAMG,QAAUnB,KAAKI,OAC9BsB,EAASV,EAAMI,QAAUpB,KAAKM,OAClCN,KAAKU,QAAQY,QAAQpC,MAAMqC,KAAOvB,KAAKO,SAAWkB,EAAS,KAC3DzB,KAAKU,QAAQY,QAAQpC,MAAMsC,IAAMxB,KAAKQ,SAAWkB,EAAS,QA1B9D,CAAAZ,IAAA,SAAAC,MAAA,WA4BW,IAAAY,EAAA3B,KACP,OACEjB,EAAAC,EAAAC,cAAA,OACE2C,UAAU,YACVC,YAAa,SAAAC,GAAC,OAAIH,EAAKE,YAAYC,IACnCC,UAAW,SAAAD,GAAC,OAAIH,EAAKI,UAAUD,IAC/BE,YAAa,SAAAF,GAAC,OAAIH,EAAKK,YAAYF,IACnCG,IAAKjC,KAAKU,SAEV3B,EAAAC,EAAAC,cAACJ,EAAD,WArCRc,EAAA,CAAqBJ,IAAMC,YEUd0C,mLANX,OACEnD,EAAAC,EAAAC,cAACkD,EAAD,aAHY3C,aCME4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc792995.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport './Draggable.css';\r\n\r\nexport default function Draggable(WrappedComponent) {\r\n  return class extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.mouseX = Number();\r\n      this.mouseY = Number();\r\n      this.elementX = 0;\r\n      this.elementY = 0;\r\n      this.isMouseDown = false;\r\n      this.element = React.createRef();\r\n    }\r\n    onMouseDown(event) {\r\n      console.log('event', event);\r\n      this.mouseX = event.clientX;\r\n      this.mouseY = event.clientY;\r\n      this.isMouseDown = true;\r\n    }\r\n    onMouseUp(event) {\r\n      this.isMouseDown = false;\r\n      this.elementX = parseInt(this.element.current.style.left) || 0;\r\n      this.elementY = parseInt(this.element.current.style.top) || 0;\r\n    }\r\n    onMouseMove(event) {\r\n      if (!this.isMouseDown) return;\r\n      let deltaX = event.clientX - this.mouseX;\r\n      let deltaY = event.clientY - this.mouseY;\r\n      this.element.current.style.left = this.elementX + deltaX + \"px\";\r\n      this.element.current.style.top = this.elementY + deltaY + \"px\";\r\n    }\r\n    render() {\r\n      return (\r\n        <div\r\n          className=\"draggable\"\r\n          onMouseDown={e => this.onMouseDown(e)}\r\n          onMouseUp={e => this.onMouseUp(e)}\r\n          onMouseMove={e => this.onMouseMove(e)}\r\n          ref={this.element}\r\n        >\r\n          <WrappedComponent />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n}\r\n","import React from 'react';\r\nimport Draggable from './Draggable';\r\n\r\nclass InnerComponent extends React.Component {\r\n  render() {\r\n    const style = {\r\n      width: '100px',\r\n      height: '100px',\r\n      background: 'grey',\r\n      border: '1px solid black'\r\n    }\r\n    return (\r\n      <div style={style}>\r\n        I am thing\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Draggable(InnerComponent);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport InnerComponent from './components/InnerComponent'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <InnerComponent></InnerComponent>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}